一切从登录开始!
	后台添加员工


form表单中默认的提交方式  ->  GET
login.action?name=aaaa&password=123123   GET提交方式  
在URL中使用?的形式想服务器传递参数

POST提交 不会在url地址栏上面留下参数列表


凡是访问页面的请求都加上xxxPage后缀

loginPage.action



作业:
1.完成项目所有的页面 登录  主页   进/出  添加管理  员工查询...
2.总结转发，重定向		200
3.总结servlet生命周期	300









请求:凡是向服务器获取资源的操作，都叫做请求
<img src="xxxx.jpg" />

一般来说 我们将网站的资源文件暴露在外界，将页面文件保护

运行环境?
main方法是在workspace
web项目，通过服务器访问是在Tomcat环境中运行



4大作用域:上
	ServletContext,最大的作用域
	session
		对当前"用户"的全局数据缓存
		
	request作用域	只能是当前"用户"使用
		生命周期 在两个页面跳转之间,请求与请求之间
	
Servlet上下文  ServletContext
	web容器全局的一个缓存，是所有"用户"公用的空间

	一个浏览器的访问  -> 用户  -> 会话

登录的用户名，密码   -> 业务用户

Map<String,Object>



Dao:  ->  接口
	DataBase  Access  Object




html 静态页面  内容已经写死的页面,可以直接被浏览器解析


动态页面  JSP  Java Service Page
页面内容由服务器生成,浏览器不能直接解析
jsp  php  asp


jsp -> servlet -> web容器解析加工 ->  PrintWriter pw = resp.getWriter();//转发
									pw.println("xxxxxxx");


jsp中的 java代码快
<%
	Java代码段
%>



作业:
1.完成今天所有的流程，学会为止
2.总结 jsp 4大作用域  servlet（生命周期） 1000字







debug  :  除虫   小强
	bug 虫    ->  漏洞   错误  ......







库存查选中的修改:
	只修改 名称，分类，进售价，保质期
删除:
	点击删除按钮。弹出确认框，点击确定删除一条数据，页面刷新




自学:
	doget,dopost
	注解捕获请求响应





唯一登录:
	管理员同一个帐号，在系统中只能登录一次








经手人（员工管理） -> CRUD操作
	分页查询:
		1.前端分页
			将表数据一口气全部查询出来，再通过页面来控制展示的数据
			面对小数据  效率高   资源少
		2.数据库分页  limit
			通过数据库的分页将部分（当前页面）数据查询出来展示


每页显示多少条数据:
	pageRow		4

当前显示第几页:
	pageNow		1		limit  0,4	->  4,4 ->  8,4 -> (pageNow - 1) * pageRow, pageRow
(pageNow - 1)*pageRow

总页数:
	pageTotal  

总条数:
	totalRow
	
	
pageTotal = totalRow % pageRow == 0 ? totalRow / pageRow : (totalRow / pageRow) + 1;


if( totalRow % pageRow == 0 ){
	pageTotal = totalRow / pageRow;
}else{
	pageTotal = (totalRow / pageRow) + 1;
}


作业：
	分页页码省略显示，在有20页的情况下，页码一次只显示5个



总共50页面  默认显示 : 1 2 3 4 5;
当前页面在1-3的时候 显示 1 2 3 4 5
当到达第4页 ： 2 3 4 5 6
.......
从48-50开始：46 47 48 49 50




验证码:
	图像验证码
		生成: swing生成图片(封装)  生成随机数字(字母)  使用流将数字(字母图片)传回页面
		验证: 将数字或字母写入一个(答案)域中, 在登录的时候获取用户填写验证码  在进行数据库操作之前 对比答案和用户的验证码
	邮箱验证码
	短信验证码
	语音验证码
	



Java常见加密：
|-可逆加密
	key:
		1.对称加密		AES
			加密和解密的key相同
			
		2.非对称加密
			加密和解密的key不同
			
		凯撒加密->对英文 反编为ASCII 然后对该ASCII进行加减预算 (final +5)
			a(原文) ->  97  ->  102  ->  f(密文)
		
|-不可逆加密
	当原文（需要加密的数据）经过加密算法之后，生成的密文(加密之后的数据),该密文不可反向再还原成原文
	MD5  ->  生成32位密文
	Token的一种合理算法    UUID  通过时间算法，获取一个唯一(全球)的值





权限管理:
	1.功能权限
		管理员在模块权限中，对不同的功能进行操作的权限
	2.模块权限
		是将项目的功能板块进行划分(模块)，管理员对不同的功能模块进行不同的操作(包含CRUP)
	3.行级权限
		查询权限中，不同管理员对不同数据行的操作
	4.列级权限
		不同管理员对列表不同字段(列)的操作
	5.身份权限
		根据管理员不同的岗位，职位，身份级别进行权限划分
	6.权限赋予
		管理员可以将自己的权限交给其他管理员，且交与的权限不能高于本身权限

	权限过滤！
		将当前用户发送的请求uri与当前用户数据库中已有的权限url对比，如果存在，则表示该用户可以访问当前uri

t_func:
	功能权限表 -> 默认每个用户都有模块权限
	
模块权限伴随查询	（查）
	|-增删改























uri = /empListPage.action

{


/empListPage.action={/deleteEmp.action=删除员工, /checkEmp.action=添加员工, /empListPage.action=查询员工, /addEmp.action=添加员工, /addEmpPage.action=添加员工, /updateEmpPage.action=修改员工, /updateEmp.action=修改员工}, 

/indexPage.action={/indexPage.action=查询库存}


}

单点登录:
	登录支付宝之后不用再次登录淘宝或者登录QQ之后，就不用再登录某些网站




唯一登录:
1.前一个登录的用户"永久"在系统中，后面的相同帐号用户不允许登陆
	1.数据库增加登录字段
	2.session销毁监听
	3.浏览器关闭监听  -> 浏览器不兼容 
	4.心跳验证（心跳包）		不建议乱用，服务器压力增大，监控灵活
		1.前端轮寻的方式定期想服务器发送"在线"请求
		2.服务端定期接受请求，并更新接受请求的时间戳
		3.服务端监听请求超时的session，将其销毁
			1.将所有用户的session放入上下文中 List
			2.协议个session缓存 List
			
			心跳中存在时间差，有可能第一次遍历缓存的时候会出现null时间戳。
			
轮寻:前端定期像服务器发送请求，获取服务器资源


2.前一个用户被后来的用户挤掉
	1.登录的用户将session放入缓存
	2.后面登录的用户，遍历缓存,存在相同用户的session，缓存中的
	3.将新的session放入缓存






作业:
1用轮寻的方式对被T下线的用户进行提醒！








解析URI
项目名称/请求名称
	请求名称：类
	请求名称   -> 方法	
	模块 -> 类

新的URI
项目名称/模块名称/请求名称
























